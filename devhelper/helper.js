import { Satyrn } from "../src/index.js";

const sample = {"targetEntities": ["Contribution", "Contributor"], "defaultEntity": "Contribution", "filters": [["amount", {"autocomplete": true, "type": "float", "allowMultiple": false, "nicename": "Contribution Amount", "desc": null}], ["inState", {"autocomplete": true, "type": "boolean", "allowMultiple": false, "nicename": "In State Contribution Status", "desc": null}], ["electionYear", {"autocomplete": false, "type": "date:year", "allowMultiple": false, "nicename": "Election Year", "desc": "The year of this election."}], ["contributionRecipient", {"autocomplete": true, "type": "string", "allowMultiple": false, "nicename": "Recipient", "desc": null}], ["contributionDate", {"autocomplete": true, "type": "datetime", "allowMultiple": false, "nicename": "Contribution Date", "desc": null}]], "columns": [{"key": "amount", "nicename": "Contribution Amount", "width": "20.0%", "sortable": true}, {"key": "inState", "nicename": "In State Contribution Status", "width": "20.0%", "sortable": true}, {"key": "electionYear", "nicename": "Election Year", "width": "20.0%", "sortable": true}, {"key": "contributionRecipient", "nicename": "Recipient", "width": "20.0%", "sortable": true}, {"key": "contributionDate", "nicename": "Contribution Date", "width": "20.0%", "sortable": true}], "defaultSort": {"key": "amount", "direction": "desc"}, "fieldUnits": {},

"analysisSpace": {"_self": {"entity": "Contribution", "nicename": ["Contribution", "Contribution"], "relType": "o2o", "attributes": [{"type": "float", "nicename": ["Contribution Amount", "Contribution Amounts"], "unit": ["dollar", "dollars"], "targetField": "amount"}, {"type": "boolean", "nicename": ["In State Contribution Status", "In State Contribution Statuses"], "unit": null, "targetField": "inState"}, {"type": "date:year", "nicename": ["Election Year", "Election Years"], "unit": null, "targetField": "electionYear"}, {"type": "string", "nicename": ["Recipient", "Recipients"], "unit": null, "targetField": "contributionRecipient"}, {"type": "datetime", "nicename": ["Contribution Date", "Contribution Dates"], "unit": null, "targetField": "contributionDate"}, {"type": "id", "nicename": false, "unit": "Contribution", "targetField": "id"}]}, "ContribToContributor": {"entity": "Contributor", "nicename": ["Contributor", "Contributor"], "relType": "m2o", "attributes": [{"type": "string", "nicename": ["Contributor", "Contributor"], "unit": null, "targetField": "name"}, {"type": "string", "nicename": ["Contributor Parent Organization", "Contributor Parent Organizations"], "unit": null, "targetField": "parentOrg"}, {"type": "string", "nicename": ["Contributor Sector", "Contributor Sectors"], "unit": null, "targetField": "area"}, {"type": "id", "nicename": false, "unit": "Contributor", "targetField": "id"}]}},

"includesRenderer": false, "targetModelName": "Contribution", "operations": {"average": {"required": {"target": {"validInputs": ["integer", "float"], "fieldType": "target"}}, "template": "Average {target}", "units": "unchanged", "type": "simple", "optional": {"groupBy": {"allowed": true, "maxDepth": 2, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}}, "count": {"required": {"target": {"validInputs": ["id"], "fieldType": "target"}}, "template": "Count of unique {target}", "units": "unchanged", "type": "simple", "optional": {"groupBy": {"allowed": true, "maxDepth": 2, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}}, "sum": {"required": {"target": {"validInputs": ["integer", "float"], "fieldType": "target"}}, "template": "Total {target}", "units": "unchanged", "type": "simple", "optional": {"groupBy": {"allowed": true, "maxDepth": 2, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}}, "min": {"required": {"target": {"validInputs": ["integer", "float"], "fieldType": "target"}}, "template": "Min of {target}", "units": "unchanged", "type": "simple", "optional": {"groupBy": {"allowed": true, "maxDepth": 2, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}}, "max": {"required": {"target": {"validInputs": ["integer", "float"], "fieldType": "target"}}, "template": "Max of {target}", "units": "unchanged", "type": "simple", "optional": {"groupBy": {"allowed": true, "maxDepth": 2, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}}, "median": {"required": {"target": {"validInputs": ["integer", "float"], "fieldType": "target"}}, "template": "Median {target}", "units": "unchanged", "type": "simple", "optional": {"groupBy": {"allowed": true, "maxDepth": 2, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}}, "averageCount": {"required": {"target": {"validInputs": ["id"], "fieldType": "target"}, "per": {"validInputs": ["id"], "fieldType": "group"}}, "template": "Average Count of {target} per {per}", "units": "target/per", "type": "recursive", "optional": {"groupBy": {"allowed": true, "maxDepth": 2, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}}, "averageSum": {"required": {"target": {"validInputs": ["float", "integer"], "fieldType": "target"}, "per": {"validInputs": ["id"], "fieldType": "group"}}, "template": "Average Sum of {target} per {per}", "units": "target/per", "type": "recursive", "optional": {"groupBy": {"allowed": true, "maxDepth": 2, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}}, "percentage": {"required": {"target": {"validInputs": ["string", "boolean"], "fieldType": "target", "parameters": [{"question": "language to be asked goes here", "inputTypes": ["boolean", "string"], "options": "any", "allowMultiple": true}]}}, "template": "Percentage of {target}", "units": "percentage", "type": "simple", "optional": {"groupBy": {"allowed": true, "maxDepth": 2, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}}, "oneHot": {"required": {"target": {"validInputs": ["string", "boolean"], "fieldType": "target", "parameters": [{"question": "language to be asked goes here", "inputTypes": ["boolean", "string"], "options": "any", "allowMultiple": true}]}}, "units": "none", "type": "simple", "optional": {"groupBy": {"allowed": true, "maxDepth": 2, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}}, "None": {"required": {"target": {"validInputs": ["integer", "float", "boolean", "string"], "fieldType": "target"}}, "units": "unchanged", "type": "simple", "optional": {"groupBy": {"allowed": true, "maxDepth": 2, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}}, "summaryStatistics": {"required": {"target": {"validInputs": ["integer", "float"], "fieldType": "target", "parameters": []}}, "optional": {"groupBy": {"allowed": true, "maxDepth": 2, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}, "spawned": {"target0": {"spawnOf": "target", "fieldType": "target"}, "target1": {"spawnOf": "target", "fieldType": "target"}, "target2": {"spawnOf": "target", "fieldType": "target"}, "target3": {"spawnOf": "target", "fieldType": "target"}}, "template": "Summary Statistics of {target}", "type": "complex"}, "correlation": {"required": {"target1": {"validInputs": ["string", "boolean", "integer", "float", "id"], "fieldType": "target", "parameters": [{"question": "language to be asked goes here", "inputTypes": ["boolean", "string"], "options": "any", "allowMultiple": false}, {"question": "language to be asked goes here", "inputTypes": ["integer", "float"], "options": "aggregation", "required": false, "allowMultiple": false}, {"question": "language to be asked goes here", "inputTypes": ["id"], "options": "aggregation", "required": false, "allowMultiple": false}]}, "target2": {"validInputs": ["string", "boolean", "integer", "float", "id"], "fieldType": "target", "parameters": [{"question": "language to be asked goes here", "inputTypes": ["boolean", "string"], "options": "any", "allowMultiple": true}, {"question": "language to be asked goes here", "inputTypes": ["int", "float"], "options": "aggregation", "required": false, "allowMultiple": false}, {"question": "language to be asked goes here", "inputTypes": ["id"], "options": "aggregation", "required": false, "allowMultiple": false}]}, "group": {"internalId": "group", "fieldType": "group", "validInputs": ["id", "boolean"], "parameters": null}}, "optional": {"groupBy": {"allowed": true, "maxDepth": 1, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}, "template": "Correlation between {group}'s {target1} and {target2}", "type": "complex"}, "comparison": {"required": {"target1": {"validInputs": ["string", "boolean", "integer", "float", "id"], "fieldType": "target", "parameters": [{"question": "language to be asked goes here", "inputTypes": ["boolean", "string"], "options": "any", "allowMultiple": false}, {"question": "language to be asked goes here", "inputTypes": ["int", "float"], "options": "aggregation", "required": false, "allowMultiple": false}, {"question": "language to be asked goes here", "inputTypes": ["id"], "options": "aggregation", "required": false, "allowMultiple": false}]}, "target2": {"validInputs": ["string", "boolean", "integer", "float", "id"], "fieldType": "target", "parameters": [{"question": "language to be asked goes here", "inputTypes": ["boolean", "string"], "options": "any", "allowMultiple": true}, {"question": "language to be asked goes here", "inputTypes": ["int", "float"], "options": "aggregation", "required": false, "allowMultiple": false}, {"question": "language to be asked goes here", "inputTypes": ["id"], "options": "aggregation", "required": false, "allowMultiple": false}]}, "group": {"internalId": "group", "fieldType": "group", "validInputs": ["id", "boolean"], "parameters": null}}, "optional": {"groupBy": {"allowed": true, "maxDepth": 1, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}, "template": "Comparison between {group}'s {target1} and {target2}", "type": "complex"}, "distribution": {"required": {"target": {"validInputs": ["integer", "float", "average", "count"], "fieldType": "target", "parameters": [{"question": "language to be asked goes here", "inputTypes": ["integer", "float"], "options": "aggregation", "required": false, "allowMultiple": false}]}, "over": {"fieldType": "group", "validInputs": ["id", "boolean", "string"], "parameters": null}}, "optional": {"groupBy": {"allowed": true, "maxDepth": 1, "validInputs": ["id", "integer", "float", "string", "boolean"], "parameters": [{"inputTypes": ["integer", "float"], "options": ["percentile", "threshold"], "allowMultiple": false}]}, "timeSeries": {"allowed": true, "maxDepth": 1, "validInputs": ["date", "datetime", "date:year"]}}, "template": "Distribution of {target} over {over}", "type": "complex"}}}

// sample.analysisSpace._self = sample.analysisSpace[null]
// delete sample.analysisSpace[null]

const satyrn = new Satyrn(sample.defaultEntity, sample.operations, sample.analysisSpace)
const plans = satyrn.planManager.generate()

let planPayload = `<h2>Ring Info</h2>
TARGET ENTITY: ${satyrn.planManager.targetEntity}
<br>
TOTAL PLAN COUNT: ${plans.length}
<br>
<h2>Plans</h2>`

const planTemplate = (plan) => `<li style="margin-bottom: 30px; display:block; padding-bottom: 30px; border-bottom: 1px solid #aaa;">
  STATEMENT: ${plan.statement}<br> PLAN: ${JSON.stringify(plan.plan)} <br/> PARAMS: ${JSON.stringify(plan.parameters)}
</li>`

plans.forEach(plan => {
  planPayload += planTemplate(plan)
})

document.getElementById("planview").innerHTML = planPayload
